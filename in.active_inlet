# SETUP --------------------------------------------------------------------------------------

shell "bash -c 'rm -f dumps/*.dat'"

shell "mkdir -p dumps"

units           si
seed            11111
dimension       3

# outflow in +x, periodic y,z. will inject at xlo (x=0)
boundary        o p p

# domain size (m)
variable        xmin equal -1.1
variable        xmax equal 1.1
variable        ymin equal -1.1
variable 	    ymax equal 1.1
variable	    zmin equal -1.1
variable	    zmax equal 1.1

variable	    Lx equal ${xmax}-${xmin}
variable        Ly equal ${ymax}-${ymin}
variable        Lz equal ${zmax}-${zmin}

create_box      ${xmin} ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}

# Load atmospheric data from NRLMSIS (run: python3 tools/load_atm_data.py)
variable        rho  file data/rho.dat
variable        nrho file data/nrho.dat
variable        T    file data/T.dat
variable        vx   file data/vx.dat

print "Loaded NRLMSIS data: rho=${rho} nrho=${nrho} T=${T} vx=${vx}"

variable 	    kB equal 1.380649e-23  # J/K
variable 	    d equal 3.7e-10  # m
variable 	    R equal 287.05 # (J / kg*K)
variable 	    lambda equal ${kB}*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) # m
variable	    vbar equal sqrt(8*${kB}*${T}/(PI*${rho}/${nrho})) # m/s

print "MEAN FREE PATH = ${lambda} m"
print "MEAN MOLEC VEL = ${vbar} m/s"

# grid resolution

variable	    dx equal ${lambda}/3 # m
variable	    mct equal ${lambda}/${vbar} # s
variable	    mtt equal ${dx}/${vbar} # s
variable	    dt equal ((${mct}<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 # min(${mct},${mtt})/3.0

print "CELL SIZE MUST BE LESS THAN ${dx} m"
print "MEAN COLL TIME = ${mct} s"
print "MEAN TRANSIT TIME = ${mtt} s"
print "TIMESTEP MUST BE < ${dt} s" # timestep set at end of script

create_grid	150 100 50 
balance_grid    rcb part

variable	    diag_freq   equal 100 # dump diagnostics every _ timesteps
variable 	    tstep       equal 1.0e-7 # choose small timestep << cell flight time; start 1e-7 s

# SURFACE GEOMETRY ----------------------------------------------------------------------------

read_surf	    surf/sat_inlet_through.surf  group ampt        # create surface group “ampt”
read_surf	    surf/inlet.surf  group inlet

# SPECIES AND MIXTURE -------------------------------------------------------------------------

# use local species file
species         species/air.species N2 O2

# define inflow gas mixture named atm
mixture 	    atm N2 frac 0.79
mixture		    atm O2 frac 0.21
mixture     	atm nrho ${nrho} vstream ${vx} 0.0 0.0 temp ${T}

# particle weighting: set target of 2e5 sim particles, calculate weighting factor
variable        Ns_target equal 100000.0
variable        Vol       equal ${Lx}*${Ly}*${Lz}
variable        fnum      equal ${nrho}*${Vol}/${Ns_target}
global          fnum ${fnum} # global bc will be queried by each new particle

variable	    parts_per equal ${nrho}/${Ns_target}
print "particles per particle = ${parts_per}"

# global useful for stat query later
global          nrho ${nrho}

# create an initial fill (n 0 -> auto compute # of particles from fnum and nrho)
create_particles	atm n 0

# continuous inflow; inject gas from xlo every step (fix -> run each time step, ID: "in")
fix		in emit/face atm xlo

# ACTIVE COMPRESSOR ---------------------------------------------------------------------------


# make compressor boundary at inlet
# make probe region immediately upstream
# make the probe region read incoming flux of particles to get nrho_in and vx_in and T_in (running avg)
# make the boundary absorb and vanish incoming particles travelling in +x direction
# then make the boundary emit particles in +x with nrho_out, v_out, T_out

# probe region immediately upstream of inlet (thin slab)
                # ID, type, xlo xhi ylo yhi zlo zhi
region          inlet_probe block -0.6 -0.55 -0.09 0.09 -0.09 0.09

# define computes for local probe properties (per-region averages)
                # ID, type, region, mixture, property
compute         probe_n grid inlet_probe atm density
compute         probe_vx grid inlet_probe atm vx
compute         probe_T grid inlet_probe atm temp

# exp decay running average of the probe computes, updates every step
                # ID, type, region, nevery nrepeat nfreq, columns (compute array), ave style (running)
fix             probe_n_avg ave/grid inlet_probe 1 1 1 c_probe_n[*] ave running
fix             probe_vx_avg ave/grid inlet_probe 1 1 1 c_probe_vx[*] ave running
fix             probe_T_avg ave/grid inlet_probe 1 1 1 c_probe_T[*] ave running

# expose scalar averaged values via variables (use the first cell entry c_compute[1])
variable        nrho_in equal c_probe_n[1]
variable        vx_in   equal c_probe_vx[1]
variable        T_in    equal c_probe_T[1]

# derived combustion/outlet properties
variable    flow_in     equal ${nrho_in}*${vx_in}
variable    p_out       equal 133.322                       # 1 Torr to Pa
variable    gamma       equal 1.4
variable    cp          equal ${gamma}/(${gamma}-1.0)*${R}    # J/(kg K)
variable    T_out       equal ${T_in}+${vx_in}*${vx_in}/(2.0*${cp}) # stagnation enthalpy balance
variable    nrho_out    equal ${p_out}/(${kB}*${T_out})
variable    v_out       equal ${flow_in}/${nrho_out}

# directional sink implemented via region-based conditional delete
                # define a thin delete region immediately upstream of the inlet surface
                # (use a slightly larger slab than the probe to ensure capture of incoming particles)
region          inlet_delete block -0.605 -0.55 -0.09 0.09 -0.09 0.09

                # create an atom-style group for particles currently in the delete region
group           delete_reg region inlet_delete

                # delete atoms in the delete region that are moving in +x (vx > 0)
                # use a variable that evaluates per-atom and then delete atoms matching it
variable        del_cond atom "vx > 0.0"

                # The delete_atoms command supports the style "region" and a group, and can
                # accept the atom-style variable via an if/when style using the "variable" keyword
                # Here we use a simple periodic delete executed every timestep to remove
                # particles that cross the throat traveling in +x before the emitter runs.
delete_atoms    group delete_reg variable del_cond

                # emit from inlet surface using computed mixture attributes; preserve species fracs
                # ID, type, mixture, surf_group, vstream(x y z), temp, nrho (emit parameters)
fix             inlet_emit emit/surf atm inlet vstream ${v_out} 0.0 0.0 temp ${T_out} nrho ${nrho_out}

                # diagnostic print of averaged probe values and derived emission values
variable        _print_freq equal ${diag_freq}
variable        _print_str string "nrho_in=${nrho_in} vx_in=${vx_in} T_in=${T_in} -> T_out=${T_out} nrho_out=${nrho_out} v_out=${v_out}"
print           "${_print_str}"



# SURFACE COLLISIONS --------------------------------------------------------------------------

                # compute ID, type, surf group, mixture, property (energy flux on surface)
compute         compute_qwall surf ampt atm etot # etot = kinetic + internal energy. W/m^2 *multi-column array for all surface groups

                # running‑average every step so flux is never exactly zero (exponential decay)
fix             flux ave/surf ampt 1 1 1 c_compute_qwall[1] ave running  # running mean, updates each step
fix             fix_Tsurf surf/temp ampt 1 f_flux 300.0 0.9 Tsurf  # Stefan-Boltzmann


surf_collide 	wall diffuse s_Tsurf 0.9           # define collision model “wall”, random dir, use local facet temp, acc
surf_modify 	ampt collide wall # attach model to facets

# DIAGNOSTICS ---------------------------------------------------------------------------------

                # ID, data type, mixture, every _ steps, filename, columns (particle data)
dump            dump_part particle atm ${diag_freq} dumps/part.*.dat id type x y z vx vy vz

                # ID, type, region, mixture, property (gas temperature per grid cell)
compute         compute_Tgrid grid all atm temp # *per-grid array
                # ID, data type, region, every _ steps, filename, columns (cell coords and gas temperature)
dump 		dump_grid grid all ${diag_freq} dumps/grid.*.dat id xlo ylo zlo xc yc zc c_compute_Tgrid[*] # compute for all columns (gases) in array

		# ID, data type, region, every _ steps, filename, columns (facet id, triangle vertices, surface temperature)
dump    	dump_surf surf ampt ${diag_freq} dumps/surf.*.dat id v1x v1y v1z v2x v2y v2z v3x v3y v3z f_flux[*] s_Tsurf

# cell-averaged (streaming+thermal) temperature
compute         Tbox temp # define a compute Tbox that calculates domain everaged temp
stats           ${diag_freq} # print diagnostics every _ timesteps
stats_style     step cpu np nattempt ncoll c_Tbox # print timestep, runtime, particles, collision stats, avg temp

timestep        ${tstep}
collide		    vss atm vss/air.vss # variable soft sphere model
run             25000

shell "rm -f data/rho.dat data/nrho.dat data/T.dat data/vx.dat"
