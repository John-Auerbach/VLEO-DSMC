# SETUP --------------------------------------------------------------------------------------

shell "bash -c 'rm -f dumps/*.dat'"

shell "mkdir -p dumps"

units           si
seed            11111
dimension       3

# outflow in +x, periodic y,z. will inject at xlo (x=0)
boundary        o p p

# domain size (m)
variable        xmin equal -1.1
variable        xmax equal 1.1
variable        ymin equal -1.1
variable 	    ymax equal 1.1
variable	    zmin equal -1.1
variable	    zmax equal 1.1

variable	    Lx equal ${xmax}-${xmin}
variable        Ly equal ${ymax}-${ymin}
variable        Lz equal ${zmax}-${zmin}

create_box      ${xmin} ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}

# Load atmospheric data from NRLMSIS (run: python3 tools/load_atm_data.py)
variable        rho  file data/rho.dat
variable        nrho file data/nrho.dat
variable        T    file data/T.dat
variable        vx   file data/vx.dat

print "Loaded NRLMSIS data: rho=${rho} nrho=${nrho} T=${T} vx=${vx}"

variable 	kB equal 1.380649e-23  # J/K
variable 	d equal 3.7e-10  # m
variable 	R equal 287.05 # (J / kg*K)
variable 	lambda equal ${kB}*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) # m
variable	vbar equal sqrt(8*${kB}*${T}/(PI*${rho}/${nrho})) # m/s

print "MEAN FREE PATH = ${lambda} m"
print "MEAN MOLEC VEL = ${vbar} m/s"

# grid resolution

variable	dx equal ${lambda}/3 # m
variable	mct equal ${lambda}/${vbar} # s
variable	mtt equal ${dx}/${vbar} # s
variable	dt equal ((${mct}<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 # min(${mct},${mtt})/3.0

print "CELL SIZE MUST BE LESS THAN ${dx} m"
print "MEAN COLL TIME = ${mct} s"
print "MEAN TRANSIT TIME = ${mtt} s"
print "TIMESTEP MUST BE < ${dt} s" # timestep set at end of script

create_grid	150 100 50 
balance_grid    rcb part

variable	diag_freq   equal 100 # dump diagnostics every _ timesteps
variable 	tstep       equal 1.0e-7 # choose small timestep << cell flight time; start 1e-7 s

# SURFACE GEOMETRY ----------------------------------------------------------------------------

read_surf	surf/ampt_box.surf  group ampt        # create surface group "ampt"
read_surf	surf/xlo_bdy.surf  group xlo_bdy transparent
read_surf	surf/xhi_bdy.surf  group xhi_bdy transparent

# SPECIES AND MIXTURE -------------------------------------------------------------------------

# use local species file
species         species/air.species N2 O2

# define inflow gas mixture named atm
mixture 	atm N2 frac 0.79
mixture		atm O2 frac 0.21
mixture     	atm nrho ${nrho} vstream ${vx} 0.0 0.0 temp ${T}

# particle weighting: set target of 2e5 sim particles, calculate weighting factor
variable        Ns_target equal 100000.0
variable        Vol       equal ${Lx}*${Ly}*${Lz}
variable        fnum      equal ${nrho}*${Vol}/${Ns_target}
global          fnum ${fnum} # global bc will be queried by each new particle

variable	parts_per equal ${nrho}/${Ns_target}
print "particles per particle = ${parts_per}"

# global useful for stat query later
global          nrho ${nrho}

# create an initial fill (n 0 -> auto compute # of particles from fnum and nrho)
create_particles	atm n 0

# continuous inflow; inject gas from xlo every step (fix -> run each time step, ID: "in")
fix		in emit/face atm xlo

# SURFACE COLLISIONS --------------------------------------------------------------------------

                # compute ID, type, surf group, mixture, property (energy flux on surface)
compute         compute_qwall surf ampt atm etot # etot = kinetic + internal energy. W/m^2 *multi-column array for all surface groups

                # runningâ€‘average every step so flux is never exactly zero (exponential decay)
fix             flux ave/surf ampt 1 1 1 c_compute_qwall[1] ave running  # running mean, updates each step
fix             fix_Tsurf surf/temp ampt 1 f_flux 300.0 0.9 Tsurf  # Stefan-Boltzmann


surf_collide 	wall diffuse s_Tsurf 0.9           # define collision model "wall", random dir, use local facet temp, acc
surf_modify 	ampt collide wall # attach model to facets

surf_collide    trans transparent                  # define transparent collision model for boundary surfaces
surf_modify     xlo_bdy collide trans              # attach transparent model to xlo_bdy
surf_modify     xhi_bdy collide trans              # attach transparent model to xhi_bdy

# DIAGNOSTICS ---------------------------------------------------------------------------------

                # ID, data type, mixture, every _ steps, filename, columns (particle data)
dump            dump_part particle atm ${diag_freq} dumps/part.*.dat id type x y z vx vy vz

                # ID, type, region, mixture, property (gas temperature per grid cell)
compute         compute_Tgrid grid all atm temp # *per-grid array
                # ID, data type, region, every _ steps, filename, columns (cell coords and gas temperature)
dump 		dump_grid grid all ${diag_freq} dumps/grid.*.dat id xlo ylo zlo xc yc zc c_compute_Tgrid[*] # compute for all columns (gases) in array

		# ID, data type, region, every _ steps, filename, columns (facet id, triangle vertices, surface temperature)
dump    	dump_surf surf ampt ${diag_freq} dumps/surf.*.dat id v1x v1y v1z v2x v2y v2z v3x v3y v3z f_flux[*] s_Tsurf

# DRAG CALC (short for caclulator) ------------------------
# boundary method: use mass flux and kinetic energy flux through transparent surface. 
                    # these can be used to find pressure in front and behind object which gives F_drag

compute         xlo_flux surf xlo_bdy atm mflux ke                                      # mflux = mass flux, ke = kinetic energy flux
compute         xlo_mflux_avg reduce ave c_xlo_flux[1]                                  # average mass flux
compute         xlo_ke_avg reduce ave c_xlo_flux[2]                                     # average KE flux
fix             xlo_out ave/time 1 1 1 c_xlo_mflux_avg c_xlo_ke_avg ave running file dumps/xlo_flux.dat

compute         xhi_flux surf xhi_bdy atm mflux ke                                      # mflux = mass flux, ke = kinetic energy flux
compute         xhi_mflux_avg reduce ave c_xhi_flux[1]                                  # average mass flux
compute         xhi_ke_avg reduce ave c_xhi_flux[2]                                     # average KE flux
fix             xhi_out ave/time 1 1 1 c_xhi_mflux_avg c_xhi_ke_avg ave running file dumps/xhi_flux.dat


# sum of surface forces (direct):
                # compute per-surface-element force components (fx,fy,fz) for group ampt
compute         surfF surf ampt atm fx fy fz
                # time-average per-surf forces (running mean)
fix             surfavg ave/surf ampt 1 1 1 c_surfF[*] ave running

                # reduce (sum) per-surf averaged fx -> global c_drag[1]
compute         drag reduce sum f_surfavg[1]

# write total drag (timestep, drag) to a simple file every 1 step
# use fix ave/time to write the scalar compute c_drag to file (one line per output: timestep value)
fix             dragout ave/time 1 1 1 c_drag file dumps/direct_drag.dat mode scalar

# ----------------------------------------------------------

# cell-averaged (streaming+thermal) temperature
compute         Tbox temp # define a compute Tbox that calculates domain everaged temp
stats           ${diag_freq} # print diagnostics every _ timesteps
stats_style     step cpu np nattempt ncoll c_Tbox c_drag # print timestep, runtime, particles, collision stats, avg temp, total drag

timestep        ${tstep}
collide		    vss atm vss/air.vss # variable soft sphere model
run             1000

shell "rm -f data/rho.dat data/nrho.dat data/T.dat data/vx.dat"
