SPARTA (20 Jan 2025)
Running on 1 MPI task(s)
# SETUP --------------------------------------------------------------------------------------

shell "bash -c 'rm -f dumps/*.dat'"

shell "mkdir -p dumps"

units           si
seed            11111
dimension       3

# outflow in +x, periodic y,z. will inject at xlo (x=0)
boundary        o p p

# domain size (m)
variable        xmin equal -1.1
variable        xmax equal 1.1
variable        ymin equal -1.1
variable 	    ymax equal 1.1
variable	    zmin equal -1.1
variable	    zmax equal 1.1

variable	    Lx equal ${xmax}-${xmin}
variable	    Lx equal 1.1-${xmin}
variable	    Lx equal 1.1--1.1
variable        Ly equal ${ymax}-${ymin}
variable        Ly equal 1.1-${ymin}
variable        Ly equal 1.1--1.1
variable        Lz equal ${zmax}-${zmin}
variable        Lz equal 1.1-${zmin}
variable        Lz equal 1.1--1.1

create_box      ${xmin} ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 1.1
Created orthogonal box = (-1.1 -1.1 -1.1) to (1.1 1.1 1.1)

# Load atmospheric data from NRLMSIS (run: python3 tools/load_atm_data.py)
variable        rho  file data/rho.dat
variable        nrho file data/nrho.dat
variable        T    file data/T.dat
variable        vx   file data/vx.dat

print "Loaded NRLMSIS data: rho=${rho} nrho=${nrho} T=${T} vx=${vx}"
Loaded NRLMSIS data: rho=0.00000759080 nrho=15781995163693812940 T=193.33846 vx=7853.

variable 	kB equal 1.380649e-23  # J/K
variable 	d equal 3.7e-10  # m
variable 	R equal 287.05 # (J / kg*K)
variable 	lambda equal ${kB}*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) # m
variable 	lambda equal 1.380649e-23*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*193.33846/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*193.33846/(sqrt(2.0)*PI*3.7e-10*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*193.33846/(sqrt(2.0)*PI*3.7e-10*3.7e-10*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*193.33846/(sqrt(2.0)*PI*3.7e-10*3.7e-10*0.00000759080*${R}) 
variable 	lambda equal 1.380649e-23*193.33846/(sqrt(2.0)*PI*3.7e-10*3.7e-10*0.00000759080*287.05) 
variable	vbar equal sqrt(8*${kB}*${T}/(PI*${rho}/${nrho})) # m/s
variable	vbar equal sqrt(8*1.380649e-23*${T}/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*193.33846/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*193.33846/(PI*0.00000759080/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*193.33846/(PI*0.00000759080/15781995163693812940)) 

print "MEAN FREE PATH = ${lambda} m"
MEAN FREE PATH = 2.01413287839467 m
print "MEAN MOLEC VEL = ${vbar} m/s"
MEAN MOLEC VEL = 118.879783227093 m/s

# grid resolution

variable	dx equal ${lambda}/3 # m
variable	dx equal 2.01413287839467/3 
variable	mct equal ${lambda}/${vbar} # s
variable	mct equal 2.01413287839467/${vbar} 
variable	mct equal 2.01413287839467/118.879783227093 
variable	mtt equal ${dx}/${vbar} # s
variable	mtt equal 0.671377626131557/${vbar} 
variable	mtt equal 0.671377626131557/118.879783227093 
variable	dt equal ((${mct}<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 # min(${mct},${mtt})/3.0
variable	dt equal ((0.0169426022130872<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.0169426022130872<0.00564753407102906)*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.0169426022130872<0.00564753407102906)*0.0169426022130872+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.0169426022130872<0.00564753407102906)*0.0169426022130872+(0.0169426022130872>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.0169426022130872<0.00564753407102906)*0.0169426022130872+(0.0169426022130872>=0.00564753407102906)*${mtt})/3.0 
variable	dt equal ((0.0169426022130872<0.00564753407102906)*0.0169426022130872+(0.0169426022130872>=0.00564753407102906)*0.00564753407102906)/3.0 

print "CELL SIZE MUST BE LESS THAN ${dx} m"
CELL SIZE MUST BE LESS THAN 0.671377626131557 m
print "MEAN COLL TIME = ${mct} s"
MEAN COLL TIME = 0.0169426022130872 s
print "MEAN TRANSIT TIME = ${mtt} s"
MEAN TRANSIT TIME = 0.00564753407102906 s
print "TIMESTEP MUST BE < ${dt} s" # timestep set at end of script
TIMESTEP MUST BE < 0.00188251135700969 s

create_grid	150 100 50
Created 750000 child grid cells
  CPU time = 0.420532 secs
  create/ghost percent = 26.8579 73.1421
balance_grid    rcb part
Balance grid migrated 0 cells
  CPU time = 0.342107 secs
  reassign/sort/migrate/ghost percent = 26.3394 1.53725 7.05303 65.0703

variable	diag_freq   equal 100 # dump diagnostics every _ timesteps
variable 	tstep       equal 1.0e-7 # choose small timestep << cell flight time; start 1e-7 s

# SURFACE GEOMETRY ----------------------------------------------------------------------------

read_surf	surf/ampt_box.surf  group ampt        # create surface group "ampt"
  12 triangles
  -0.5 0.5 xlo xhi
  -0.1 0.1 ylo yhi
  -0.1 0.1 zlo zhi
  0.2 min triangle edge length
  0.02 min triangle area
  2024 0 = cells overlapping surfs, overlap cells with unmarked corner pts
  78 tiny edges removed
  745800 2176 2024 = cells outside/inside/overlapping surfs
  2024 = surf cells with 1,2,etc splits
  10.608 10.608 = cell-wise and global flow volume
  CPU time = 0.44125 secs
  read/check/sort/surf2grid/ghost/inout/particle percent = 0.0212888 0.0183711 7.31492 40.1663 52.4791 28.0879 0.000270163
  surf2grid time = 0.177234 secs
  map/comm1/comm2/comm3/comm4/split percent = 37.5233 0.0079368 31.1989 2.96729 5.66714 10.8427

# SPECIES AND MIXTURE -------------------------------------------------------------------------

# use local species file
species         species/air.species N2 O2

# define inflow gas mixture named atm
mixture 	atm N2 frac 0.79
mixture		atm O2 frac 0.21
mixture     	atm nrho ${nrho} vstream ${vx} 0.0 0.0 temp ${T}
mixture     	atm nrho 15781995163693812940 vstream ${vx} 0.0 0.0 temp ${T}
mixture     	atm nrho 15781995163693812940 vstream 7853. 0.0 0.0 temp ${T}
mixture     	atm nrho 15781995163693812940 vstream 7853. 0.0 0.0 temp 193.33846

# particle weighting: set target of 2e5 sim particles, calculate weighting factor
variable        Ns_target equal 100000.0
variable        Vol       equal ${Lx}*${Ly}*${Lz}
variable        Vol       equal 2.2*${Ly}*${Lz}
variable        Vol       equal 2.2*2.2*${Lz}
variable        Vol       equal 2.2*2.2*2.2
variable        fnum      equal ${nrho}*${Vol}/${Ns_target}
variable        fnum      equal 15781995163693812940*${Vol}/${Ns_target}
variable        fnum      equal 15781995163693812940*10.648/${Ns_target}
variable        fnum      equal 15781995163693812940*10.648/100000
global          fnum ${fnum} # global bc will be queried by each new particle
global          fnum 1.68046684503012e+15 

variable	parts_per equal ${nrho}/${Ns_target}
variable	parts_per equal 15781995163693812940/${Ns_target}
variable	parts_per equal 15781995163693812940/100000
print "particles per particle = ${parts_per}"
particles per particle = 157819951636938

# global useful for stat query later
global          nrho ${nrho}
global          nrho 15781995163693812940

# create an initial fill (n 0 -> auto compute # of particles from fnum and nrho)
create_particles	atm n 0
Created 99624 particles
  CPU time = 0.027297 secs

# continuous inflow; inject gas from xlo every step (fix -> run each time step, ID: "in")
fix		in emit/face atm xlo

# SURFACE COLLISIONS --------------------------------------------------------------------------

                # compute ID, type, surf group, mixture, property (energy flux on surface)
compute         compute_qwall surf ampt atm etot # etot = kinetic + internal energy. W/m^2 *multi-column array for all surface groups

                # runningâ€‘average every step so flux is never exactly zero (exponential decay)
fix             flux ave/surf ampt 1 1 1 c_compute_qwall[1] ave running  # running mean, updates each step
fix             fix_Tsurf surf/temp ampt 1 f_flux 300.0 0.9 Tsurf  # Stefan-Boltzmann

surf_collide 	wall diffuse s_Tsurf 0.9           # define collision model "wall", random dir, use local facet temp, acc
surf_modify 	ampt collide wall # attach model to facets

# DIAGNOSTICS ---------------------------------------------------------------------------------

                # ID, data type, mixture, every _ steps, filename, columns (particle data)
dump            dump_part particle atm ${diag_freq} dumps/part.*.dat id type x y z vx vy vz
dump            dump_part particle atm 100 dumps/part.*.dat id type x y z vx vy vz

                # ID, type, region, mixture, property (gas temperature per grid cell)
compute         compute_Tgrid grid all atm temp # *per-grid array
                # ID, data type, region, every _ steps, filename, columns (cell coords and gas temperature)
dump 		dump_grid grid all ${diag_freq} dumps/grid.*.dat id xlo ylo zlo xc yc zc c_compute_Tgrid[*] # compute for all columns (gases) in array
dump 		dump_grid grid all 100 dumps/grid.*.dat id xlo ylo zlo xc yc zc c_compute_Tgrid[*] 

		# ID, data type, region, every _ steps, filename, columns (facet id, triangle vertices, surface temperature)
dump    	dump_surf surf ampt ${diag_freq} dumps/surf.*.dat id v1x v1y v1z v2x v2y v2z v3x v3y v3z f_flux[*] s_Tsurf
dump    	dump_surf surf ampt 100 dumps/surf.*.dat id v1x v1y v1z v2x v2y v2z v3x v3y v3z f_flux[*] s_Tsurf

# DRAG CALC (short for caclulator) ------------------------
# boundary method: P = pflux [kg/(m^2*s)]* vx, F_d = (P_xlo - P_xhi)*A -> done in plot_drag.py

# sample within 0.1m of boundaries
variable        dx_sample equal 0.2
region          xlo_region block ${xmin} $(v_xmin+v_dx_sample) ${ymin} ${ymax} ${zmin} ${zmax}
region          xlo_region block -1.1 $(v_xmin+v_dx_sample) ${ymin} ${ymax} ${zmin} ${zmax}
region          xlo_region block -1.1 -0.90000000000000013323 ${ymin} ${ymax} ${zmin} ${zmax}
region          xlo_region block -1.1 -0.90000000000000013323 -1.1 ${ymax} ${zmin} ${zmax}
region          xlo_region block -1.1 -0.90000000000000013323 -1.1 1.1 ${zmin} ${zmax}
region          xlo_region block -1.1 -0.90000000000000013323 -1.1 1.1 -1.1 ${zmax}
region          xlo_region block -1.1 -0.90000000000000013323 -1.1 1.1 -1.1 1.1
region          xhi_region block $(v_xmax-v_dx_sample) ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
region          xhi_region block 0.90000000000000013323 ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
region          xhi_region block 0.90000000000000013323 1.1 ${ymin} ${ymax} ${zmin} ${zmax}
region          xhi_region block 0.90000000000000013323 1.1 -1.1 ${ymax} ${zmin} ${zmax}
region          xhi_region block 0.90000000000000013323 1.1 -1.1 1.1 ${zmin} ${zmax}
region          xhi_region block 0.90000000000000013323 1.1 -1.1 1.1 -1.1 ${zmax}
region          xhi_region block 0.90000000000000013323 1.1 -1.1 1.1 -1.1 1.1

                # group ID grid region region-ID rflag
group           xlo_group grid region xlo_region center
0 initial grid cell count in group xlo_group
70000 final grid cell count in group xlo_group
group           xhi_group grid region xhi_region center
0 initial grid cell count in group xhi_group
70000 final grid cell count in group xhi_group

# pxrho [kg/(m^2*s)] * u [m/s] = pressure [Pa = kg/(m*s^2)]
compute         xlo_grid grid xlo_group atm pxrho u
compute         xlo_pxrho_avg reduce ave c_xlo_grid[1]
compute         xlo_u_avg reduce ave c_xlo_grid[2]
fix             xlo_out ave/time 1 1 1 c_xlo_pxrho_avg c_xlo_u_avg ave running file dumps/xlo_pressure.dat

compute         xhi_grid grid xhi_group atm pxrho u
compute         xhi_pxrho_avg reduce ave c_xhi_grid[1]
compute         xhi_u_avg reduce ave c_xhi_grid[2]
fix             xhi_out ave/time 1 1 1 c_xhi_pxrho_avg c_xhi_u_avg ave running file dumps/xhi_pressure.dat


# direct method: sum of surface forces:
                # compute per-surface-element force components (fx,fy,fz) for group ampt
compute         surfF surf ampt all fx fy fz
                # time-average per-surf forces (running mean)
fix             surfavg ave/surf ampt 1 1 1 c_surfF[*