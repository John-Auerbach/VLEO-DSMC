SPARTA (20 Jan 2025)
Running on 1 MPI task(s)
# SETUP --------------------------------------------------------------------------------------

shell "bash -c 'rm -f dumps/*.dat'"

shell "mkdir -p dumps"

units           si
seed            11111
dimension       3

# outflow in +x, periodic y,z. will inject at xlo (x=0)
boundary        o p p

# domain size (m)
variable        xmin equal -1.1
variable        xmax equal 1.1
variable        ymin equal -1.1
variable 	    ymax equal 1.1
variable	    zmin equal -1.1
variable	    zmax equal 1.1

variable	    Lx equal ${xmax}-${xmin}
variable	    Lx equal 1.1-${xmin}
variable	    Lx equal 1.1--1.1
variable        Ly equal ${ymax}-${ymin}
variable        Ly equal 1.1-${ymin}
variable        Ly equal 1.1--1.1
variable        Lz equal ${zmax}-${zmin}
variable        Lz equal 1.1-${zmin}
variable        Lz equal 1.1--1.1

create_box      ${xmin} ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 1.1
Created orthogonal box = (-1.1 -1.1 -1.1) to (1.1 1.1 1.1)

# Load atmospheric data from NRLMSIS (run: python3 tools/load_atm_data.py)
variable        rho  file data/rho.dat
variable        nrho file data/nrho.dat
variable        T    file data/T.dat
variable        vx   file data/vx.dat

print "Loaded NRLMSIS data: rho=${rho} nrho=${nrho} T=${T} vx=${vx}"
Loaded NRLMSIS data: rho=7.590801364413e-06 nrho=1.578200e+20 T=193.338461 vx=7853.3

variable 	kB equal 1.380649e-23  # J/K
variable 	d equal 3.7e-10  # m
variable 	R equal 287.05 # (J / kg*K)
variable 	lambda equal ${kB}*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) # m
variable 	lambda equal 1.380649e-23*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*193.338461/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*193.338461/(sqrt(2.0)*PI*3.7e-10*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*193.338461/(sqrt(2.0)*PI*3.7e-10*3.7e-10*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*193.338461/(sqrt(2.0)*PI*3.7e-10*3.7e-10*7.590801364413e-06*${R}) 
variable 	lambda equal 1.380649e-23*193.338461/(sqrt(2.0)*PI*3.7e-10*3.7e-10*7.590801364413e-06*287.05) 
variable	vbar equal sqrt(8*${kB}*${T}/(PI*${rho}/${nrho})) # m/s
variable	vbar equal sqrt(8*1.380649e-23*${T}/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*193.338461/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*193.338461/(PI*7.590801364413e-06/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*193.338461/(PI*7.590801364413e-06/1.578200e+20)) 

print "MEAN FREE PATH = ${lambda} m"
MEAN FREE PATH = 2.01413252678084 m
print "MEAN MOLEC VEL = ${vbar} m/s"
MEAN MOLEC VEL = 375.93090753192 m/s

# grid resolution

variable	dx equal ${lambda}/3 # m
variable	dx equal 2.01413252678084/3 
variable	mct equal ${lambda}/${vbar} # s
variable	mct equal 2.01413252678084/${vbar} 
variable	mct equal 2.01413252678084/375.93090753192 
variable	mtt equal ${dx}/${vbar} # s
variable	mtt equal 0.671377508926947/${vbar} 
variable	mtt equal 0.671377508926947/375.93090753192 
variable	dt equal ((${mct}<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 # min(${mct},${mtt})/3.0
variable	dt equal ((0.00535771995977697<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00535771995977697<0.00178590665325899)*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00535771995977697<0.00178590665325899)*0.00535771995977697+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00535771995977697<0.00178590665325899)*0.00535771995977697+(0.00535771995977697>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00535771995977697<0.00178590665325899)*0.00535771995977697+(0.00535771995977697>=0.00178590665325899)*${mtt})/3.0 
variable	dt equal ((0.00535771995977697<0.00178590665325899)*0.00535771995977697+(0.00535771995977697>=0.00178590665325899)*0.00178590665325899)/3.0 

print "CELL SIZE MUST BE LESS THAN ${dx} m"
CELL SIZE MUST BE LESS THAN 0.671377508926947 m
print "MEAN COLL TIME = ${mct} s"
MEAN COLL TIME = 0.00535771995977697 s
print "MEAN TRANSIT TIME = ${mtt} s"
MEAN TRANSIT TIME = 0.00178590665325899 s
print "TIMESTEP MUST BE < ${dt} s" # timestep set at end of script
TIMESTEP MUST BE < 0.000595302217752997 s

create_grid	150 100 50
Created 750000 child grid cells
  CPU time = 0.430697 secs
  create/ghost percent = 29.593 70.407
balance_grid    rcb part
Balance grid migrated 0 cells
  CPU time = 0.317788 secs
  reassign/sort/migrate/ghost percent = 27.1797 1.54888 6.17144 65.1

variable	diag_freq   equal 100 # dump diagnostics every _ timesteps
variable 	tstep       equal 1.0e-7 # choose small timestep << cell flight time; start 1e-7 s

# SURFACE GEOMETRY ----------------------------------------------------------------------------

read_surf	surf/ampt_box.surf  group ampt        # create surface group "ampt"
  12 triangles
  -0.5 0.5 xlo xhi
  -0.1 0.1 ylo yhi
  -0.1 0.1 zlo zhi
  0.2 min triangle edge length
  0.02 min triangle area
  2024 0 = cells overlapping surfs, overlap cells with unmarked corner pts
  78 tiny edges removed
  745800 2176 2024 = cells outside/inside/overlapping surfs
  2024 = surf cells with 1,2,etc splits
  10.608 10.608 = cell-wise and global flow volume
  CPU time = 0.400361 secs
  read/check/sort/surf2grid/ghost/inout/particle percent = 0.146078 0.0242372 6.32705 41.3772 52.1255 28.318 0.000238204
  surf2grid time = 0.165658 secs
  map/comm1/comm2/comm3/comm4/split percent = 38.7734 0.00849141 32.9087 2.87456 4.82254 8.96793
read_surf	surf/xlo_bdy.surf  group xlo_bdy transparent
  2 triangles
  -1 -1 xlo xhi
  -1.1 1.1 ylo yhi
  -1.1 1.1 zlo zhi
  2.2 min triangle edge length
  2.42 min triangle area
  2024 0 = cells overlapping surfs, overlap cells with unmarked corner pts
  156 tiny edges removed
  745800 2176 2024 = cells outside/inside/overlapping surfs
  2024 = surf cells with 1,2,etc splits
  10.608 10.608 = cell-wise and global flow volume
  CPU time = 0.395964 secs
  read/check/sort/surf2grid/ghost/inout/particle percent = 0.0131263 0.0113801 7.59992 38.5979 53.7776 28.6334 0.000240849
  surf2grid time = 0.152834 secs
  map/comm1/comm2/comm3/comm4/split percent = 34.434 0.0098279 27.3565 3.16692 7.01743 14.4706
read_surf	surf/xhi_bdy.surf  group xhi_bdy transparent
  2 triangles
  0.7 0.7 xlo xhi
  -1.1 1.1 ylo yhi
  -1.1 1.1 zlo zhi
  2.2 min triangle edge length
  2.42 min triangle area
  2024 0 = cells overlapping surfs, overlap cells with unmarked corner pts
  234 tiny edges removed
  745800 2176 2024 = cells outside/inside/overlapping surfs
  2024 = surf cells with 1,2,etc splits
  10.608 10.608 = cell-wise and global flow volume
  CPU time = 0.382807 secs
  read/check/sort/surf2grid/ghost/inout/particle percent = 0.0159441 0.01283 7.61898 38.6035 53.7488 31.5799 0.000249127
  surf2grid time = 0.147777 secs
  map/comm1/comm2/comm3/comm4/split percent = 36.2398 0.012907 29.5411 3.59604 6.02593 10.3974

# SPECIES AND MIXTURE -------------------------------------------------------------------------

# use local species file
species         species/air.species N2 O2

# define inflow gas mixture named atm
mixture 	atm N2 frac 0.79
mixture		atm O2 frac 0.21
mixture     	atm nrho ${nrho} vstream ${vx} 0.0 0.0 temp ${T}
mixture     	atm nrho 1.578200e+20 vstream ${vx} 0.0 0.0 temp ${T}
mixture     	atm nrho 1.578200e+20 vstream 7853.3 0.0 0.0 temp ${T}
mixture     	atm nrho 1.578200e+20 vstream 7853.3 0.0 0.0 temp 193.338461

# particle weighting: set target of 2e5 sim particles, calculate weighting factor
variable        Ns_target equal 200000.0
variable        Vol       equal ${Lx}*${Ly}*${Lz}
variable        Vol       equal 2.2*${Ly}*${Lz}
variable        Vol       equal 2.2*2.2*${Lz}
variable        Vol       equal 2.2*2.2*2.2
variable        fnum      equal ${nrho}*${Vol}/${Ns_target}
variable        fnum      equal 1.578200e+20*${Vol}/${Ns_target}
variable        fnum      equal 1.578200e+20*10.648/${Ns_target}
variable        fnum      equal 1.578200e+20*10.648/200000
global          fnum ${fnum} # global bc will be queried by each new particle
global          fnum 8.4023368e+15 

variable	parts_per equal ${nrho}/${Ns_target}
variable	parts_per equal 1.578200e+20/${Ns_target}
variable	parts_per equal 1.578200e+20/200000
print "particles per particle = ${parts_per}"
particles per particle = 789100000000000

# global useful for stat query later
global          nrho ${nrho}
global          nrho 1.578200e+20

# create an initial fill (n 0 -> auto compute # of particles from fnum and nrho)
create_particles	atm n 0
Created 199248 particles
  CPU time = 0.071476 secs

# continuous inflow; inject gas from xlo every step (fix -> run each time step, ID: "in")
fix		in emit/face atm xlo

# SURFACE COLLISIONS --------------------------------------------------------------------------

                # compute ID, type, surf group, mixture, property (energy flux on surface)
compute         compute_qwall surf ampt atm etot # etot = kinetic + internal energy. W/m^2 *multi-column array for all surface groups

                # runningâ€‘average every step so flux is never exactly zero (exponential decay)
fix             flux ave/surf ampt 1 1 1 c_compute_qwall[1] ave running  # running mean, updates each step
fix             fix_Tsurf surf/temp ampt 1 f_flux 300.0 0.9 Tsurf  # Stefan-Boltzmann


surf_collide 	wall diffuse s_Tsurf 0.9           # define collision model "wall", random dir, use local facet temp, acc
surf_modify 	ampt collide wall # attach model to facets

surf_collide    trans transparent                  # define transparent collision model for boundary surfaces
surf_modify     xlo_bdy collide trans              # attach transparent model to xlo_bdy
surf_modify     xhi_bdy collide trans              # attach transparent model to xhi_bdy

# DIAGNOSTICS ---------------------------------------------------------------------------------

                # ID, data type, mixture, every _ steps, filename, columns (particle data)
dump            dump_part particle atm ${diag_freq} dumps/part.*.dat id type x y z vx vy vz
dump            dump_part particle atm 100 dumps/part.*.dat id type x y z vx vy vz

                # ID, type, region, mixture, property (gas temperature per grid cell)
compute         compute_Tgrid grid all atm temp # *per-grid array
                # ID, data type, region, every _ steps, filename, columns (cell coords and gas temperature)
dump 		dump_grid grid all ${diag_freq} dumps/grid.*.dat id xlo ylo zlo xc yc zc c_compute_Tgrid[*] # compute for all columns (gases) in array
dump 		dump_grid grid all 100 dumps/grid.*.dat id xlo ylo zlo xc yc zc c_compute_Tgrid[*] 

		# ID, data type, region, every _ steps, filename, columns (facet id, triangle vertices, surface temperature)
dump    	dump_surf surf ampt ${diag_freq} dumps/surf.*.dat id v1x v1y v1z v2x v2y v2z v3x v3y v3z f_flux[*] s_Tsurf
dump    	dump_surf surf ampt 100 dumps/surf.*.dat id v1x v1y v1z v2x v2y v2z v3x v3y v3z f_flux[*] s_Tsurf

# DRAG CALC (short for caclulator) ------------------------
# boundary method: use mass flux and kinetic energy flux through transparent surface.
                    # these can be used to find pressure in front and behind object which gives F_drag

compute         xlo_flux surf xlo_bdy atm mflux ke                                      # mflux = mass flux, ke = kinetic energy flux
compute         xlo_mflux_avg reduce ave c_xlo_flux[1]                                  # average mass flux
compute         xlo_ke_avg reduce ave c_xlo_flux[2]                                     # average KE flux
fix             xlo_out ave/time 1 1 1 c_xlo_mflux_avg c_xlo_ke_avg ave running file dumps/xlo_flux.dat

compute         xhi_flux surf xhi_bdy atm mflux ke                                      # mflux = mass flux, ke = kinetic energy flux
compute         xhi_mflux_avg reduce ave c_xhi_flux[1]                                  # average mass flux
compute         xhi_ke_avg reduce ave c_xhi_flux[2]                                     # average KE flux
fix             xhi_out ave/time 1 1 1 c_xhi_mflux_avg c_xhi_ke_avg ave running file dumps/xhi_flux.dat


# sum of surface forces (direct):
                # compute per-surface-element force components (fx,fy,fz) for group ampt
compute         surfF surf ampt atm fx fy fz
                # time-average per-surf forces (running mean)
fix             surfavg ave/surf ampt 1 1 1 c_surfF[*] ave running

                # reduce (sum) per-surf averaged fx -> global c_drag[1]
compute         drag reduce sum f_surfavg[1]

# write total drag (timestep, drag) to a simple file every 1 step
# use fix ave/time to write the scalar compute c_drag to file (one line per output: timestep value)
fix             dragout ave/time 1 1 1 c_drag file dumps/direct_drag.dat mode scalar

# ----------------------------------------------------------

# cell-averaged (streaming+thermal) temperature
compute         Tbox temp # define a compute Tbox that calculates domain everaged temp
stats           ${diag_freq} # print diagnostics every _ timesteps
stats           100 
stats_style     step cpu np nattempt ncoll c_Tbox c_drag # print timestep, runtime, particles, collision stats, avg temp, total drag

timestep        ${tstep}
timestep        1e-07
collide		    vss atm vss/air.vss # variable soft sphere model
run             10000
Memory usage per proc in Mbytes:
  particles (ave,min,max) = 21.9375 21.9375 21.9375
  grid      (ave,min,max) = 132.364 132.364 132.364
  surf      (ave,min,max) = 0.00201416 0.00201416 0.00201416
  total     (ave,min,max) = 165.749 165.749 165.749
Step CPU Np Natt Ncoll c_Tbox c_drag 
       0            0   199248        0        0     71494.37            0 
     100    3.3458848   199525        6        6    71469.179     26.73046 
     200    6.9996288   199353       12       10     71437.88    27.550044 
     300    10.724231   199550       40       28    71415.457    26.259743 
     400    14.582575   199433       72       60    71390.049    26.933275 
     500    18.416255   199535      115       89    71369.521    26.949043 
     600    22.229622   199493      160      125    71339.169    27.002601 
     700    24.276212   199412      228      183    71314.858    26.994107 
     800    28.221045   199693      307      244        71281    26.753546 
     900    32.123277   199770      310      243    71259.187    26.476524 
    1000    36.082046   199849      370      295    71230.411    26.447076 
    1100    40.002275   199859      424      335    71203.952    25.715511 
    1200    43.983448   200020      484      368     71175.64     25.83346 
    1300    48.067764   199922      503      397    71141.075     25.80056 
    1400    52.017056   200039      542      413    71115.544    25.887413 
    1500    54.106778   200194      550      441     71092.38    25.585032 
    1600    58.131157   200264      569      438    71063.273    25.483526 
    1700    62.100159   200320      592      450    71032.598    25.456139 
    1800    66.205263   200482      653      508    71008.627    25.530015 
    1900    70.429847   200687      668      512    70982.973    25.434404 
    2000    74.401023   200737      609      489    70956.317     25.51559 
    2100     78.50025   200792      637      492    70927.864    25.426505 
    2200    82.599985   200816      705      552    70895.745    25.615983 
    2300    84.770404   200957      678      520    70870.674    25.680829 
    2400    88.893395   201106      683      533    70847.683     25.82516 
    2500    93.010187   201185      722      557    70817.479    26.016516 
    2600    97.044532   201225      716      551     70789.36    25.973311 
    2700    101.25604   201523      690      537    70762.823    26.017734 
    2800    105.42151   201556      712      547    70712.219    26.223405 
    2900    109.45755   201579      761      578    70673.828    26.143102 
    3000    113.56943   201613      713      576    70635.436    26.070622 
    3100    115.81417   201624      649      508    70599.525    26.070192 
    3200    119.89761   201723      731      5