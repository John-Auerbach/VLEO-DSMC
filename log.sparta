SPARTA (20 Jan 2025)
Running on 1 MPI task(s)
# SETUP --------------------------------------------------------------------------------------

shell "bash -c 'rm -f dumps/*.dat'"

shell "mkdir -p dumps"

units           si
seed            11111
dimension       3

# outflow in +x, periodic y,z. will inject at xlo (x=0)
boundary        o p p

# domain size (m)
variable        xmin equal -1.1
variable        xmax equal 1.1
variable        ymin equal -1.1
variable 	ymax equal 1.1
variable	zmin equal -1.1
variable	zmax equal 1.1

variable	Lx equal ${xmax}-${xmin}
variable	Lx equal 1.1-${xmin}
variable	Lx equal 1.1--1.1
variable        Ly equal ${ymax}-${ymin}
variable        Ly equal 1.1-${ymin}
variable        Ly equal 1.1--1.1
variable        Lz equal ${zmax}-${zmin}
variable        Lz equal 1.1-${zmin}
variable        Lz equal 1.1--1.1

create_box      ${xmin} ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 1.1
Created orthogonal box = (-1.1 -1.1 -1.1) to (1.1 1.1 1.1)

# Load atmospheric data from NRLMSIS (run: python3 tools/load_atm_data.py)
variable        rho  file data/rho.dat
variable        nrho file data/nrho.dat
variable        T    file data/T.dat
variable        vx   file data/vx.dat

print "Loaded NRLMSIS data: rho=${rho} nrho=${nrho} T=${T} vx=${vx}"
Loaded NRLMSIS data: rho=0.00001708270 nrho=35516553478260857241 T=199.67355 vx=7856.

variable 	kB equal 1.380649e-23  # J/K
variable 	d equal 3.7e-10  # m
variable 	R equal 287.05 # (J / kg*K)
variable 	lambda equal ${kB}*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) # m
variable 	lambda equal 1.380649e-23*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*199.67355/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*199.67355/(sqrt(2.0)*PI*3.7e-10*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*199.67355/(sqrt(2.0)*PI*3.7e-10*3.7e-10*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*199.67355/(sqrt(2.0)*PI*3.7e-10*3.7e-10*0.00001708270*${R}) 
variable 	lambda equal 1.380649e-23*199.67355/(sqrt(2.0)*PI*3.7e-10*3.7e-10*0.00001708270*287.05) 
variable	vbar equal sqrt(8*${kB}*${T}/(PI*${rho}/${nrho})) # m/s
variable	vbar equal sqrt(8*1.380649e-23*${T}/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*199.67355/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*199.67355/(PI*0.00001708270/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*199.67355/(PI*0.00001708270/35516553478260857241)) 

print "MEAN FREE PATH = ${lambda} m"
MEAN FREE PATH = 0.924318058786514 m
print "MEAN MOLEC VEL = ${vbar} m/s"
MEAN MOLEC VEL = 120.811734281083 m/s

# grid resolution

variable	dx equal ${lambda}/3 # m
variable	dx equal 0.924318058786514/3 
variable	mct equal ${lambda}/${vbar} # s
variable	mct equal 0.924318058786514/${vbar} 
variable	mct equal 0.924318058786514/120.811734281083 
variable	mtt equal ${dx}/${vbar} # s
variable	mtt equal 0.308106019595505/${vbar} 
variable	mtt equal 0.308106019595505/120.811734281083 
variable	dt equal ((${mct}<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 # min(${mct},${mtt})/3.0
variable	dt equal ((0.00765089636604319<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00765089636604319<0.00255029878868107)*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00765089636604319<0.00255029878868107)*0.00765089636604319+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00765089636604319<0.00255029878868107)*0.00765089636604319+(0.00765089636604319>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.00765089636604319<0.00255029878868107)*0.00765089636604319+(0.00765089636604319>=0.00255029878868107)*${mtt})/3.0 
variable	dt equal ((0.00765089636604319<0.00255029878868107)*0.00765089636604319+(0.00765089636604319>=0.00255029878868107)*0.00255029878868107)/3.0 

print "CELL SIZE MUST BE LESS THAN ${dx} m"
CELL SIZE MUST BE LESS THAN 0.308106019595505 m
print "MEAN COLL TIME = ${mct} s"
MEAN COLL TIME = 0.00765089636604319 s
print "MEAN TRANSIT TIME = ${mtt} s"
MEAN TRANSIT TIME = 0.00255029878868107 s
print "TIMESTEP MUST BE < ${dt} s" # timestep set at end of script
TIMESTEP MUST BE < 0.000850099596227023 s

create_grid	150 100 50
Created 750000 child grid cells
  CPU time = 0.412174 secs
  create/ghost percent = 26.0009 73.9991
balance_grid    rcb part
Balance grid migrated 0 cells
  CPU time = 0.308872 secs
  reassign/sort/migrate/ghost percent = 27.004 1.58062 7.45556 63.9598

variable	diag_freq   equal 100 # dump diagnostics every _ timesteps
variable 	tstep       equal 1.0e-7 # choose small timestep << cell flight time; start 1e-7 s

# SURFACE GEOMETRY ----------------------------------------------------------------------------

read_surf	surf/ampt_box.surf  group ampt        # create surface group “ampt”
  12 triangles
  -0.5 0.5 xlo xhi
  -0.1 0.1 ylo yhi
  -0.1 0.1 zlo zhi
  0.2 min triangle edge length
  0.02 min triangle area
  2024 0 = cells overlapping surfs, overlap cells with unmarked corner pts
  78 tiny edges removed
  745800 2176 2024 = cells outside/inside/overlapping surfs
  2024 = surf cells with 1,2,etc splits
  10.608 10.608 = cell-wise and global flow volume
  CPU time = 0.403023 secs
  read/check/sort/surf2grid/ghost/inout/particle percent = 0.149373 0.0212967 7.10163 40.9227 51.805 28.7502 0
  surf2grid time = 0.164928 secs
  map/comm1/comm2/comm3/comm4/split percent = 38.669 0.00722796 32.7597 2.82368 5.00392 8.79426

# SPECIES AND MIXTURE -------------------------------------------------------------------------

# use local species file
species         species/air.species N2 O2

# define inflow gas mixture named atm
mixture 	atm N2 frac 0.79
mixture		atm O2 frac 0.21
mixture     	atm nrho ${nrho} vstream ${vx} 0.0 0.0 temp ${T}
mixture     	atm nrho 35516553478260857241 vstream ${vx} 0.0 0.0 temp ${T}
mixture     	atm nrho 35516553478260857241 vstream 7856. 0.0 0.0 temp ${T}
mixture     	atm nrho 35516553478260857241 vstream 7856. 0.0 0.0 temp 199.67355

# particle weighting: set target of 2e5 sim particles, calculate weighting factor
variable        Ns_target equal 100000.0
variable        Vol       equal ${Lx}*${Ly}*${Lz}
variable        Vol       equal 2.2*${Ly}*${Lz}
variable        Vol       equal 2.2*2.2*${Lz}
variable        Vol       equal 2.2*2.2*2.2
variable        fnum      equal ${nrho}*${Vol}/${Ns_target}
variable        fnum      equal 35516553478260857241*${Vol}/${Ns_target}
variable        fnum      equal 35516553478260857241*10.648/${Ns_target}
variable        fnum      equal 35516553478260857241*10.648/100000
global          fnum ${fnum} # global bc will be queried by each new particle
global          fnum 3.78180261436522e+15 

variable	parts_per equal ${nrho}/${Ns_target}
variable	parts_per equal 35516553478260857241/${Ns_target}
variable	parts_per equal 35516553478260857241/100000
print "particles per particle = ${parts_per}"
particles per particle = 355165534782609

# global useful for stat query later
global          nrho ${nrho}
global          nrho 35516553478260857241

# create an initial fill (n 0 -> auto compute # of particles from fnum and nrho)
create_particles	atm n 0
Created 99624 particles
  CPU time = 0.0281479 secs

# continuous inflow; inject gas from xlo every step (fix -> run each time step, ID: "in")
fix		in emit/face atm xlo

# SURFACE COLLISIONS --------------------------------------------------------------------------

                # compute ID, type, surf group, mixture, property (energy flux on surface)
compute         compute_qwall surf ampt atm etot # etot = kinetic + internal energy. W/m^2 *multi-column array for all surface groups

                # running‑average every step so flux is never exactly zero (exponential decay)
fix             flux ave/surf ampt 1 1 1 c_compute_qwall[1] ave running  # running mean, updates each step
fix             fix_Tsurf surf/temp ampt 1 f_flux 300.0 0.9 Tsurf  # Stefan