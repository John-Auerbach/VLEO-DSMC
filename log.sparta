SPARTA (20 Jan 2025)
Running on 1 MPI task(s)
# SETUP --------------------------------------------------------------------------------------

shell "bash -c 'rm -f dumps/*.dat'"

shell "mkdir -p dumps"

units           si
seed            11111
dimension       3

# outflow in +x, periodic y,z. will inject at xlo (x=0)
boundary        o p p

# domain size (m)
variable        xmin equal -1.1
variable        xmax equal 1.1
variable        ymin equal -1.1
variable 	    ymax equal 1.1
variable	    zmin equal -1.1
variable	    zmax equal 1.1

variable	    Lx equal ${xmax}-${xmin}
variable	    Lx equal 1.1-${xmin}
variable	    Lx equal 1.1--1.1
variable        Ly equal ${ymax}-${ymin}
variable        Ly equal 1.1-${ymin}
variable        Ly equal 1.1--1.1
variable        Lz equal ${zmax}-${zmin}
variable        Lz equal 1.1-${zmin}
variable        Lz equal 1.1--1.1

create_box      ${xmin} ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 ${xmax} ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 ${ymin} ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 ${ymax} ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 ${zmin} ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 ${zmax}
create_box      -1.1 1.1 -1.1 1.1 -1.1 1.1
Created orthogonal box = (-1.1 -1.1 -1.1) to (1.1 1.1 1.1)

# Load atmospheric data from NRLMSIS (run: python3 tools/load_atm_data.py)
variable        rho  file data/rho.dat
variable        nrho file data/nrho.dat
variable        T    file data/T.dat
variable        vx   file data/vx.dat

print "Loaded NRLMSIS data: rho=${rho} nrho=${nrho} T=${T} vx=${vx}"
Loaded NRLMSIS data: rho=0.00000759080 nrho=15781995163693812940 T=193.33846 vx=7853.

variable 	kB equal 1.380649e-23  # J/K
variable 	d equal 3.7e-10  # m
variable 	R equal 287.05 # (J / kg*K)
variable 	lambda equal ${kB}*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) # m
variable 	lambda equal 1.380649e-23*${T}/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*193.33846/(sqrt(2.0)*PI*${d}*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*193.33846/(sqrt(2.0)*PI*3.7e-10*${d}*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*193.33846/(sqrt(2.0)*PI*3.7e-10*3.7e-10*${rho}*${R}) 
variable 	lambda equal 1.380649e-23*193.33846/(sqrt(2.0)*PI*3.7e-10*3.7e-10*0.00000759080*${R}) 
variable 	lambda equal 1.380649e-23*193.33846/(sqrt(2.0)*PI*3.7e-10*3.7e-10*0.00000759080*287.05) 
variable	vbar equal sqrt(8*${kB}*${T}/(PI*${rho}/${nrho})) # m/s
variable	vbar equal sqrt(8*1.380649e-23*${T}/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*193.33846/(PI*${rho}/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*193.33846/(PI*0.00000759080/${nrho})) 
variable	vbar equal sqrt(8*1.380649e-23*193.33846/(PI*0.00000759080/15781995163693812940)) 

print "MEAN FREE PATH = ${lambda} m"
MEAN FREE PATH = 2.01413287839467 m
print "MEAN MOLEC VEL = ${vbar} m/s"
MEAN MOLEC VEL = 118.879783227093 m/s

# grid resolution

variable	dx equal ${lambda}/3 # m
variable	dx equal 2.01413287839467/3 
variable	mct equal ${lambda}/${vbar} # s
variable	mct equal 2.01413287839467/${vbar} 
variable	mct equal 2.01413287839467/118.879783227093 
variable	mtt equal ${dx}/${vbar} # s
variable	mtt equal 0.671377626131557/${vbar} 
variable	mtt equal 0.671377626131557/118.879783227093 
variable	dt equal ((${mct}<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 # min(${mct},${mtt})/3.0
variable	dt equal ((0.0169426022130872<${mtt})*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.0169426022130872<0.00564753407102906)*${mct}+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.0169426022130872<0.00564753407102906)*0.0169426022130872+(${mct}>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.0169426022130872<0.00564753407102906)*0.0169426022130872+(0.0169426022130872>=${mtt})*${mtt})/3.0 
variable	dt equal ((0.0169426022130872<0.00564753407102906)*0.0169426022130872+(0.0169426022130872>=0.00564753407102906)*${mtt})/3.0 
variable	dt equal ((0.0169426022130872<0.00564753407102906)*0.0169426022130872+(0.0169426022130872>=0.00564753407102906)*0.00564753407102906)/3.0 

print "CELL SIZE MUST BE LESS THAN ${dx} m"
CELL SIZE MUST BE LESS THAN 0.671377626131557 m
print "MEAN COLL TIME = ${mct} s"
MEAN COLL TIME = 0.0169426022130872 s
print "MEAN TRANSIT TIME = ${mtt} s"
MEAN TRANSIT TIME = 0.00564753407102906 s
print "TIMESTEP MUST BE < ${dt} s" # timestep set at end of script
TIMESTEP MUST BE < 0.00188251135700969 s

create_grid	150 100 50
Created 750000 child grid cells
  CPU time = 0.387143 secs
  create/ghost percent = 28.7186 71.2814
balance_grid    rcb part
Balance grid migrated 0 cells
  CPU time = 0.313715 secs
  reassign/sort/migrate/ghost percent = 28.3936 1.68945 7.27663 62.6403

variable	diag_freq   equal 100 # dump diagnostics every _ timesteps
variable 	tstep       equal 1.0e-7 # choose small timestep << cell flight time; start 1e-7 s

# SURFACE GEOMETRY ----------------------------------------------------------------------------

read_surf	surf/ampt_box.surf  group ampt        # create surface group "ampt"
  12 triangles
  -0.5 0.5 xlo xhi
  -0.1 0.1 ylo yhi
  -0.1 0.1 zlo zhi
  0.2 min triangle edge length
  0.02 min triangle area
  2024 0 = cells overlapping surfs, overlap cells with unmarked corner pts
  78 tiny edges removed
  745800 2176 2024 = cells outside/inside/overlapping surfs
  2024 = surf cells with 1,2,etc splits
  10.608 10.608 = cell-wise and global flow volume
  CPU time = 0.413685 secs
  read/check/sort/surf2grid/ghost/inout/particle percent = 0.0135437 0.0118724 6.52473 41.8159 51.634 30.5191 0
  surf2grid time = 0.172986 secs
  map/comm1/comm2/comm3/comm4/split percent = 38.484 0.00813169 31.9985 3.09859 5.58082 9.11342
read_surf	surf/xlo_bdy.surf  group xlo_bdy transparent
  2 triangles
  -1 -1 xlo xhi
  -1.1 1.1 ylo yhi
  -1.1 1.1 zlo zhi
  2.2 min triangle edge length
  2.42 min triangle area
  2024 0 = cells overlapping surfs, overlap cells with unmarked corner pts
  156 tiny edges removed
  745800 2176 2024 = cells outside/inside/overlapping surfs
  2024 = surf cells with 1,2,etc splits
  10.608 10.608 = cell-wise and global flow volume
  CPU time = 0.384792 secs
  read/check/sort/surf2grid/ghost/inout/particle percent = 0.0130117 0.0119584 7.35693 37.7677 54.8504 30.4892 0
  surf2grid time = 0.145327 secs
  map/comm1/comm2/comm3/comm4/split percent = 36.1069 0.00885905 28.5818 3.76461 6.60163 10.9319
read_surf	surf/xhi_bdy.surf  group xhi_bdy transparent
  2 triangles
  0.7 0.7 xlo xhi
  -1.1 1.1 ylo yhi
  -1.1 1.1 zlo zhi
  2.2 min triangle edge length
  2.42 min triangle area
  2024 0 = cells overlapping surfs, overlap cells with unmarked corner pts
  234 tiny edges removed
  745800 2176 2024 = cells outside/inside/overlapping surfs
  2024 = surf cells with 1,2,etc splits
  10.608 10.608 = cell-wise and global flow volume
  CPU time = 0.388401 secs
  read/check/sort/surf2grid/ghost/inout/particle percent = 0.0133819 0.0123383 7.13284 38.3447 54.4968 31.2741 0
  surf2grid time = 0.148931 secs
  map/comm1/comm2/comm3/comm4/split percent = 36.0685 0.0227323 28.0841 3.86145 6.7286 11.2113

# SPECIES AND MIXTURE -------------------------------------------------------------------------

# use local species file
species         species/air.species N2 O2

# define inflow gas mixture named atm
mixture 	atm N2 frac 0.79
mixture		atm O2 frac 0.21
mixture     	atm nrho ${nrho} vstream ${vx} 0.0 0.0 temp ${T}
mixture     	atm nrho 15781995163693812940 vstream ${vx} 0.0 0.0 temp ${T}
mixture     	atm nrho 15781995163693812940 vstream 7853. 0.0 0.0 temp ${T}
mixture     	atm nrho 15781995163693812940 vstream 7853. 0.0 0.0 temp 193.33846

# particle weighting: set target of 2e5 sim particles, calculate weighting factor
variable        Ns_target equal 200000.0
variable        Vol       equal ${Lx}*${Ly}*${Lz}
variable        Vol       equal 2.2*${Ly}*${Lz}
variable        Vol       equal 2.2*2.2*${Lz}
variable        Vol       equal 2.2*2.2*2.2
variable        fnum      equal ${nrho}*${Vol}/${Ns_target}
variable        fnum      equal 15781995163693812940*${Vol}/${Ns_target}
variable        fnum      equal 15781995163693812940*10.648/${Ns_target}
variable        fnum      equal 15781995163693812940*10.648/200000
global          fnum ${fnum} # global bc will be queried by each new particle
global          fnum 840233422515059 

variable	parts_per equal ${nrho}/${Ns_target}
variable	parts_per equal 15781995163693812940/${Ns_target}
variable	parts_per equal 15781995163693812940/200000
print "particles per particle = ${parts_per}"
particles per particle = 78909975818469.1

# global useful for stat query later
global          nrho ${nrho}
global          nrho 15781995163693812940

# create an initial fill (n 0 -> auto compute # of particles from fnum and nrho)
create_particles	atm n 0
Created 199248 particles
  CPU time = 0.053448 secs

# continuous inflow; inject gas from xlo every step (fix -> run each time step, ID: "in")
fix		in emit/face atm xlo

# SURFACE COLLISIONS --------------------------------------------------------------------------

                # compute ID, type, surf group, mixture, property (energy flux on surface)
compute         compute_qwall surf ampt atm etot # etot = kinetic + internal energy. W/m^2 *multi-column array for all surface groups

                # runningâ€‘average every step so flux is never exactly zero (exponential decay)
fix             flux ave/surf ampt 1 1 1 c_compute_qwall[1] ave running  # running mean, updates each step
fix             fix_Tsurf surf/temp ampt 1 f_flux 300.0 0.9 Tsurf  # Stefan-Boltzmann


surf_collide 	wall diffuse s_Tsurf 0.9           # define collision model "wall", random dir, use local facet temp, acc
surf_modify 	ampt collide wall # attach model to facets

surf_collide    trans transparent                  # define transparent collision model for boundary surfaces
surf_modify     xlo_bdy collide trans              # attach transparent model to xlo_bdy
surf_modify     xhi_bdy collide trans              # attach transparent model to xhi_bdy

# DIAGNOSTICS ---------------------------------------------------------------------------------

                # ID, data type, mixture, every _ steps, filename, columns (particle data)
dump            dump_part particle atm ${diag_freq} dumps/part.*.dat id type x y z vx vy vz
dump            dump_part particle atm 100 dumps/part.*.dat id type x y z vx vy vz

                # ID, type, region, mixture, property (gas temperature per grid cell)
compute         compute_Tgrid grid all atm temp # *per-grid array
                # ID, data type, region, every _ steps, filename, columns (cell coords and gas temperature)
dump 		dump_grid grid all ${diag_freq} dumps/grid.*.dat id xlo ylo zlo xc yc zc c_compute_Tgrid[*] # compute for all columns (gases) in array
dump 		dump_grid grid all 100 dumps/grid.*.dat id xlo ylo zlo xc yc zc c_compute_Tgrid[*] 

		# ID, data type, region, every _ steps, filename, columns (facet id, triangle vertices, surface temperature)
dump    	dump_surf surf ampt ${diag_freq} dumps/surf.*.dat id v1x v1y v1z v2x v2y v2z v3x v3y v3z f_flux[*] s_Tsurf
dump    	dump_surf surf ampt 100 dumps/surf.*.dat id v1x v1y v1z v2x v2y v2z v3x v3y v3z f_flux[*] s_Tsurf

# DRAG CALC (short for caclulator) ------------------------
# boundary method: use mass flux and kinetic energy flux through transparent surface.
                    # these can be used to find pressure in front and behind object which gives F_drag

compute         xlo_flux surf xlo_bdy atm mflux ke                                      # mflux = mass flux, ke = kinetic energy flux
compute         xlo_mflux_avg reduce ave c_xlo_flux[1]                                  # average mass flux
compute         xlo_ke_avg reduce ave c_xlo_flux[2]                                     # average KE flux
fix             xlo_out ave/time 1 1 1 c_xlo_mflux_avg c_xlo_ke_avg ave running file dumps/xlo_flux.dat

compute         xhi_flux surf xhi_bdy atm mflux ke                                      # mflux = mass flux, ke = kinetic energy flux
compute         xhi_mflux_avg reduce ave c_xhi_flux[1]                                  # average mass flux
compute         xhi_ke_avg reduce ave c_xhi_flux[2]                                     # average KE flux
fix             xhi_out ave/time 1 1 1 c_xhi_mflux_avg c_xhi_ke_avg ave running file dumps/xhi_flux.dat


# sum of surface forces (direct):
                # compute per-surface-element force components (fx,fy,fz) for group ampt
compute         surfF surf ampt atm fx fy fz
                # time-average per-surf forces (running mean)
fix             surfavg ave/surf ampt 1 1 1 c_surfF[*] ave running

                # reduce (sum) per-surf averaged fx -> global c_drag[1]
compute         drag reduce sum f_surfavg[1]

# write total drag (timestep, drag) to a simple file every 1 step
# use fix ave/time to write the scalar compute c_drag to file (one line per output: timestep value)
fix             dragout ave/time 1 1 1 c_drag file dumps/direct_drag.dat mode scalar

# ----------------------------------------------------------

# cell-averaged (streaming+thermal) temperature
compute         Tbox temp # define a compute Tbox that calculates domain everaged temp
stats           ${diag_freq} # print diagnostics every _ timesteps
stats           100 
stats_style     step cpu np nattempt ncoll c_Tbox c_drag # print timestep, runtime, particles, collision stats, avg temp, total drag

timestep        ${tstep}
timestep        1e-07
collide		    vss atm vss/air.vss # variable soft sphere model
run             10000
Memory usage per proc in Mbytes:
  particles (ave,min,max) = 21.9375 21.9375 21.9375
  grid      (ave,min,max) = 132.364 132.364 132.364
  surf      (ave,min,max) = 0.00201416 0.00201416 0.00201416
  total     (ave,min,max) = 165.749 165.749 165.749
Step CPU Np Natt Ncoll c_Tbox c_drag 
       0            0   199248        0        0    71488.922            0 
     100     3.776155   199525        0        0    71463.646    2.5910121 
     200     7.801116   199353        0        0    71430.997    2.7736392 
     300    11.570429   199550        0        0    71410.244    2.6569774 
     400    15.710616   199435        1        1    71385.845    2.6880405 
     500     17.83043   199538        1        1    71366.806    2.6099288 
     600    21.731521   199493        2        1    71338.938    2.6544084 
     700    25.749333   199416        1        1    71315.866    2.6803211 
     800    29.813681   199681        1        1    71288.627    2.6279155 
     900     33.78125   199766        4        3    71269.392    2.5897548 
    1000    37.918396   199837        4        3    71243.772    2.6079793 
    1100    41.960652   199835        4        2    71220.282    2.5737062 
    1200    45.929728   199996        9        3    71200.385     2.566209 
    1300    48.130221   199902        5        4    71168.345    2.5990163 
    1400    52.114679   200019        7        7    71151.289    2.5894412 
    1500    56.186641   200158        2        2    71131.918    2.5919364 
    1600    60.319037   200211        8        2    71107.439    2.5907397 
    1700    64.435358   200278        9        5    71082.235    2.5856814 
    1800    68.520661   200396        7        4    71057.896    2.5951205 
    1900    72.681531   200615        6        2    71036.638    2.6007068 
    2000    75.020801   200608        8        5    71010.786    2.6041639 
    2100    79.105303   200681        3        2    70988.381    2.6104599 
    2200    83.833153   200661        5        3    70967.619    2.6017736 
    2300    89.327574   200821        8        4    70947.128    2.6073217 
    2400    94.504104   200978        4        2    70932.945    2.5867797 
    2500    98.822238   201000        5        3    70917.232    2.5736388 
    2600    103.45884   201033        5        3    70892.388    2.5872289 
    2700    105.88353   201383        3        0    70880.531    2.5780664 
    2800    110.45998   201420        6        1    70852.634    2.5792892 
    2900    115.33061   201322        8        3    70841.487    2.5679412 
    3000    119.90178   201145        7        5    70831.333    2.5532866 
    3100      124.339   201106       10        5    70810.297    2.5501552 
    3200    128.54786   20